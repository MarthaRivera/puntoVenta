//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CapaDatos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BDPuntoVentaEntities : DbContext
    {
        public BDPuntoVentaEntities()
            : base("name=BDPuntoVentaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Catalogo> Catalogos { get; set; }
        public virtual DbSet<Categoria> Categorias { get; set; }
        public virtual DbSet<Inventario> Inventarios { get; set; }
        public virtual DbSet<Empleado> Empleados { get; set; }
        public virtual DbSet<Cliente> Clientes { get; set; }
        public virtual DbSet<Venta> Ventas { get; set; }
        public virtual DbSet<Venta_Producto> Venta_Producto { get; set; }
        public virtual DbSet<V_Inventario> V_Inventario { get; set; }
        public virtual DbSet<V_Productos> V_Productos { get; set; }
    
        public virtual ObjectResult<CatalogoBuscar_Result> CatalogoBuscar(string nombreBuscado)
        {
            var nombreBuscadoParameter = nombreBuscado != null ?
                new ObjectParameter("NombreBuscado", nombreBuscado) :
                new ObjectParameter("NombreBuscado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CatalogoBuscar_Result>("CatalogoBuscar", nombreBuscadoParameter);
        }
    
        public virtual ObjectResult<CatalogoEditar_Result> CatalogoEditar(Nullable<int> id_Producto, string nombreProducto, string nombreCategoria, string unidad, Nullable<decimal> precioCosto, Nullable<decimal> ganancia, Nullable<decimal> precioVenta, Nullable<decimal> cantidad)
        {
            var id_ProductoParameter = id_Producto.HasValue ?
                new ObjectParameter("Id_Producto", id_Producto) :
                new ObjectParameter("Id_Producto", typeof(int));
    
            var nombreProductoParameter = nombreProducto != null ?
                new ObjectParameter("NombreProducto", nombreProducto) :
                new ObjectParameter("NombreProducto", typeof(string));
    
            var nombreCategoriaParameter = nombreCategoria != null ?
                new ObjectParameter("NombreCategoria", nombreCategoria) :
                new ObjectParameter("NombreCategoria", typeof(string));
    
            var unidadParameter = unidad != null ?
                new ObjectParameter("Unidad", unidad) :
                new ObjectParameter("Unidad", typeof(string));
    
            var precioCostoParameter = precioCosto.HasValue ?
                new ObjectParameter("PrecioCosto", precioCosto) :
                new ObjectParameter("PrecioCosto", typeof(decimal));
    
            var gananciaParameter = ganancia.HasValue ?
                new ObjectParameter("Ganancia", ganancia) :
                new ObjectParameter("Ganancia", typeof(decimal));
    
            var precioVentaParameter = precioVenta.HasValue ?
                new ObjectParameter("PrecioVenta", precioVenta) :
                new ObjectParameter("PrecioVenta", typeof(decimal));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CatalogoEditar_Result>("CatalogoEditar", id_ProductoParameter, nombreProductoParameter, nombreCategoriaParameter, unidadParameter, precioCostoParameter, gananciaParameter, precioVentaParameter, cantidadParameter);
        }
    
        public virtual int CatalogoEliminar(Nullable<int> id_Producto)
        {
            var id_ProductoParameter = id_Producto.HasValue ?
                new ObjectParameter("Id_Producto", id_Producto) :
                new ObjectParameter("Id_Producto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CatalogoEliminar", id_ProductoParameter);
        }
    
        public virtual int CatalogoInsertar(string nombreProducto, string nombreCategoria, string unidad, Nullable<decimal> precioCosto, Nullable<decimal> ganancia, Nullable<decimal> precioVenta, Nullable<decimal> cantidad)
        {
            var nombreProductoParameter = nombreProducto != null ?
                new ObjectParameter("NombreProducto", nombreProducto) :
                new ObjectParameter("NombreProducto", typeof(string));
    
            var nombreCategoriaParameter = nombreCategoria != null ?
                new ObjectParameter("NombreCategoria", nombreCategoria) :
                new ObjectParameter("NombreCategoria", typeof(string));
    
            var unidadParameter = unidad != null ?
                new ObjectParameter("Unidad", unidad) :
                new ObjectParameter("Unidad", typeof(string));
    
            var precioCostoParameter = precioCosto.HasValue ?
                new ObjectParameter("PrecioCosto", precioCosto) :
                new ObjectParameter("PrecioCosto", typeof(decimal));
    
            var gananciaParameter = ganancia.HasValue ?
                new ObjectParameter("Ganancia", ganancia) :
                new ObjectParameter("Ganancia", typeof(decimal));
    
            var precioVentaParameter = precioVenta.HasValue ?
                new ObjectParameter("PrecioVenta", precioVenta) :
                new ObjectParameter("PrecioVenta", typeof(decimal));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CatalogoInsertar", nombreProductoParameter, nombreCategoriaParameter, unidadParameter, precioCostoParameter, gananciaParameter, precioVentaParameter, cantidadParameter);
        }
    
        public virtual ObjectResult<string> CategoriaBuscar(string nombreBuscado)
        {
            var nombreBuscadoParameter = nombreBuscado != null ?
                new ObjectParameter("NombreBuscado", nombreBuscado) :
                new ObjectParameter("NombreBuscado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CategoriaBuscar", nombreBuscadoParameter);
        }
    
        public virtual int CategoriaEditar(string nombreCategoria, string nuevoNombreCategoria)
        {
            var nombreCategoriaParameter = nombreCategoria != null ?
                new ObjectParameter("NombreCategoria", nombreCategoria) :
                new ObjectParameter("NombreCategoria", typeof(string));
    
            var nuevoNombreCategoriaParameter = nuevoNombreCategoria != null ?
                new ObjectParameter("NuevoNombreCategoria", nuevoNombreCategoria) :
                new ObjectParameter("NuevoNombreCategoria", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CategoriaEditar", nombreCategoriaParameter, nuevoNombreCategoriaParameter);
        }
    
        public virtual int CategoriaEliminar(string nombreCategoria)
        {
            var nombreCategoriaParameter = nombreCategoria != null ?
                new ObjectParameter("NombreCategoria", nombreCategoria) :
                new ObjectParameter("NombreCategoria", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CategoriaEliminar", nombreCategoriaParameter);
        }
    
        public virtual int CategoriaInsertar(string nombreCategoria)
        {
            var nombreCategoriaParameter = nombreCategoria != null ?
                new ObjectParameter("NombreCategoria", nombreCategoria) :
                new ObjectParameter("NombreCategoria", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CategoriaInsertar", nombreCategoriaParameter);
        }
    
        public virtual ObjectResult<string> CategoriaListar()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CategoriaListar");
        }
    
        public virtual ObjectResult<CategoriaListarCB_Result> CategoriaListarCB()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CategoriaListarCB_Result>("CategoriaListarCB");
        }
    
        public virtual ObjectResult<InventarioBuscar_Result> InventarioBuscar(string nombreBuscado)
        {
            var nombreBuscadoParameter = nombreBuscado != null ?
                new ObjectParameter("NombreBuscado", nombreBuscado) :
                new ObjectParameter("NombreBuscado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InventarioBuscar_Result>("InventarioBuscar", nombreBuscadoParameter);
        }
    
        public virtual ObjectResult<InventarioListar_Result> InventarioListar()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InventarioListar_Result>("InventarioListar");
        }
    
        public virtual int InventarioModificar(string nombreProducto, Nullable<decimal> cantidad)
        {
            var nombreProductoParameter = nombreProducto != null ?
                new ObjectParameter("NombreProducto", nombreProducto) :
                new ObjectParameter("NombreProducto", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InventarioModificar", nombreProductoParameter, cantidadParameter);
        }
    
        public virtual ObjectResult<MostrarProductos_Result> MostrarProductos(Nullable<int> registrosPorPagina, Nullable<int> numeroPagina)
        {
            var registrosPorPaginaParameter = registrosPorPagina.HasValue ?
                new ObjectParameter("RegistrosPorPagina", registrosPorPagina) :
                new ObjectParameter("RegistrosPorPagina", typeof(int));
    
            var numeroPaginaParameter = numeroPagina.HasValue ?
                new ObjectParameter("NumeroPagina", numeroPagina) :
                new ObjectParameter("NumeroPagina", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MostrarProductos_Result>("MostrarProductos", registrosPorPaginaParameter, numeroPaginaParameter);
        }
    
        public virtual int ProductosPaginas(Nullable<int> registrosPorPagina, ObjectParameter totalPaginas)
        {
            var registrosPorPaginaParameter = registrosPorPagina.HasValue ?
                new ObjectParameter("RegistrosPorPagina", registrosPorPagina) :
                new ObjectParameter("RegistrosPorPagina", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProductosPaginas", registrosPorPaginaParameter, totalPaginas);
        }
    
        public virtual ObjectResult<ListarUsuario_Result> ListarUsuario()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListarUsuario_Result>("ListarUsuario");
        }
    
        public virtual int Insertar_Venta_Producto(Nullable<int> productoId, Nullable<int> ventaId, Nullable<decimal> totalVendido, Nullable<int> cantidad, ObjectParameter id)
        {
            var productoIdParameter = productoId.HasValue ?
                new ObjectParameter("ProductoId", productoId) :
                new ObjectParameter("ProductoId", typeof(int));
    
            var ventaIdParameter = ventaId.HasValue ?
                new ObjectParameter("VentaId", ventaId) :
                new ObjectParameter("VentaId", typeof(int));
    
            var totalVendidoParameter = totalVendido.HasValue ?
                new ObjectParameter("TotalVendido", totalVendido) :
                new ObjectParameter("TotalVendido", typeof(decimal));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insertar_Venta_Producto", productoIdParameter, ventaIdParameter, totalVendidoParameter, cantidadParameter, id);
        }
    
        public virtual int InsertarVenta(Nullable<decimal> total, Nullable<System.DateTime> fecha_Venta, Nullable<int> client_Id, Nullable<int> vendendor_Id, Nullable<decimal> iva, ObjectParameter id)
        {
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            var fecha_VentaParameter = fecha_Venta.HasValue ?
                new ObjectParameter("Fecha_Venta", fecha_Venta) :
                new ObjectParameter("Fecha_Venta", typeof(System.DateTime));
    
            var client_IdParameter = client_Id.HasValue ?
                new ObjectParameter("Client_Id", client_Id) :
                new ObjectParameter("Client_Id", typeof(int));
    
            var vendendor_IdParameter = vendendor_Id.HasValue ?
                new ObjectParameter("Vendendor_Id", vendendor_Id) :
                new ObjectParameter("Vendendor_Id", typeof(int));
    
            var ivaParameter = iva.HasValue ?
                new ObjectParameter("Iva", iva) :
                new ObjectParameter("Iva", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarVenta", totalParameter, fecha_VentaParameter, client_IdParameter, vendendor_IdParameter, ivaParameter, id);
        }
    
        public virtual ObjectResult<BuscarCliente_Result> BuscarCliente(string nombreBuscado)
        {
            var nombreBuscadoParameter = nombreBuscado != null ?
                new ObjectParameter("NombreBuscado", nombreBuscado) :
                new ObjectParameter("NombreBuscado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BuscarCliente_Result>("BuscarCliente", nombreBuscadoParameter);
        }
    
        public virtual int EditarClientes(string nombreClienteAntes, string nombreClientes, string direccion, string telefono, Nullable<decimal> credito)
        {
            var nombreClienteAntesParameter = nombreClienteAntes != null ?
                new ObjectParameter("NombreClienteAntes", nombreClienteAntes) :
                new ObjectParameter("NombreClienteAntes", typeof(string));
    
            var nombreClientesParameter = nombreClientes != null ?
                new ObjectParameter("NombreClientes", nombreClientes) :
                new ObjectParameter("NombreClientes", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var creditoParameter = credito.HasValue ?
                new ObjectParameter("Credito", credito) :
                new ObjectParameter("Credito", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditarClientes", nombreClienteAntesParameter, nombreClientesParameter, direccionParameter, telefonoParameter, creditoParameter);
        }
    
        public virtual int InsertarClientes(string nombreClientes, string direccion, string telefono, Nullable<decimal> credito)
        {
            var nombreClientesParameter = nombreClientes != null ?
                new ObjectParameter("NombreClientes", nombreClientes) :
                new ObjectParameter("NombreClientes", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var creditoParameter = credito.HasValue ?
                new ObjectParameter("Credito", credito) :
                new ObjectParameter("Credito", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarClientes", nombreClientesParameter, direccionParameter, telefonoParameter, creditoParameter);
        }
    
        public virtual ObjectResult<ListarClientes_Result> ListarClientes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListarClientes_Result>("ListarClientes");
        }
    }
}
